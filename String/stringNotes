STRING CLASS AND PRINTING
String object:
➢ String is a built-in class available in java.
➢ A string is a collection of characters.
➢ Simplest method for creating a string is String str1=”Java
program”;
➢ Variable of type object are called as reference.
➢ String object is referred to as a literal.
➢ References are used for holding or pointing objects.
➢ String literal is taken in “ “.
➢ Keyword new is taken to create an object in heap.
➢ Constructors are methods or functions used for creating string
object.
➢ There are three types of constructors:
• String(char [ ]).
 Array of characters is taken and is converted into string.
• String(byte [ ]).
 Array of bytes is taken and is converted into a string.
• String(string).

 A string literal is taken in this method.
 New string is created using this method.
➢ Java maintains a pool of string constants.
➢ Whenever new is applied the object is created in heap memory
and the memory occupied by the object literal is in pool.
➢ When same literal is used java does not create another object.
➢ When new is applied the object in pool may or may not be
created.
➢ String objects are immutable/ they cannot be modified.
Methods of string class:
➢ The methods creates a new string before giving the results.
➢ The new object is then created in heap memory.

1)
➢ str.length(): it returns the length of the string mentioned.
➢ str.toLowerCase(): it converts the given characters of string
into lower case.
➢ str.toUpperCase(): it converts the given characters of string
into upper case.
➢ str.trim(): it is used to remove the leading and tailing spaces
from the array if there are any.
➢ str.substring(int begin): it returns a new string by giving the
part of a string from where the index is given.
➢ str.substring(int begin, int end): it works same as the above
but the starting and ending index both can be given in the
substring.
➢ str.replace(char old, char new): it replaces the old character
with the new character.
2)
➢ str.startsWith(string s): to find the particular starting word
of a the string/to find the initials.
➢ Str.endsWith(string s): to find particular ending word of the
string.
➢ str.charAt(int index): to find the particular character present
on the index given.
➢ str.indexOf(String s): to find the index of the given character.
➢ str.lastIndexOf(string s): to find the index of the given
character from the end of the array.
3)
➢ str.equals(string s): to check whether the contents of two
strings are equal or not.
➢ str.equalsIgnoreCase(string s): to check whether the contents
of two strings are equal or not but it does not depend upon the
case of characters.
➢ str.compareTo(string s): to compare two strings according to
the dictionary order(in accordance with the ASCII codes for
cases of characters).
➢ str.valueOf(int i): to convert different types of data into
string data type.

Regular Expressions:
They are used to define the symbols.
Matching symbols:
➢ these symbols are meant for single alphabets.
➢ ‘.’ it means any letter or the symbol from the keyboard.i.e for
single alphabet it is true.
➢ [abc]: range or set of characters/ the string is true if the
alphabet is either a or b or c.
➢ [abc][vz]: range of multiple symbol/the string is true if first
symbol is among a,b &c and second symbol is among v & z.
➢ [^abc]: the string is true if the symbol is other than a, b, & c.
➢ [a-z 1-7]: the string is true if the symbol is from the range a-z
or 1-7.
➢ A|B: it is true for single alphabets fro either A or b.
➢ XZ: to check whether the string maybe either a single or
multiple alphabets.

Meta characters:
➢ \d: it will be true if it is a digit among 0-9.
➢ \D: it will be true if it is any symbol other than digits.
➢ \s: it will be true if there is just a space.
➢ \S: it will be true if there are any symbols other than space.
➢ \w: it will be true if it is either alphabet or digits.
➢ \W: it will be true if it is any symbol other than alphabets or
digits.

String matching with regular expressions:
➢ Quantifiers : these are used to define the number of symbols
you want.
• ’*’ it represents number of occurrences of any of the
characters for zero or more times.
• ’+’ it represents number of occurrences of any of the
character for one or more times.
• ’?’ it represents number of occurrences of any of the
characters for zero or one time.
• {X} it represents any of the characters for the size of X
value given.
• {X, Y} it represents any of the characters for the min
and max size given.

Format specifiers begin with a percent character (%) and terminate with a “type character, ” which indicates the type
of data (int, float, etc.) that will be converted the basic manner in which the data will be represented (decimal,
hexadecimal, etc.) The general syntax of a format specifier is

% [flags] [width] [.precision] [argsize] typechar
The format() method of Formatter class accepts a wide variety of format specifiers. When an uppercase specifier is
used, then letters are shown in uppercase. Otherwise, the upper- and lowercase specifiers perform the same conversion.

Format Specifier	Conversion Applied
%%	                 Inserts a % sign
%x %X	              Integer hexadecimal
%t %T	               Time and Date
%s %S	              String
%n	                  Inserts a newline character
%o	                  Octal integer
%f	                 Decimal floating-point
%e %E	             Scientific notation
%g	                  Causes Formatter to use either %f or %e, whichever is shorter
%h %H                  	Hash code of the argument
%d	                  Decimal integer
%c               	Character
%b %B	             Boolean
%a %A	             Floating-point hexadecimal

in java  the string variables stores objects are called as reference as they hold the address which point towards the
object at java pool

Everything that starts with a capital letter in java in a class.

For String data type variables java has a separate memory location inside java heap memory it is called as
Java Pool

The java pool allocate memory to the string data type variables.

Whenever a String variable is initialized with a value . The value is first check inside the java pool for it's
availability , if a similar value is already present in the java pool then , NO new value is stored in java pool and the
pool provide a reference address of the existence value to the newly initialized variable so that it can point towards
that value whenever he want to access it.
e.g.[  String first = "ankur"
String second = "ankur"   ]
in this example two different variable (first) and (second) of String type initialized with same value as "ankur" , but
in java pool the value "ankur" get allocated only once during the (first) initialization, when the variable (second)
also get initialized with same value then java pool provide the reference address of value to the (second) variable.
Hence both the variable can points towards the same value inside the java heap memory.

The main function of java pool is to prevent memory allocation of the same value again and again, which has been
initialized with different variable and objects.

Immutability is very important for String data types as if more than one variable initialized with same object then they
actually pointing towards a same object and if one variable modified the object value then it will also be changed for
the other variable. Hence immutability act as a security function for String classes

String objects are immutable, they can't be changed. If we want to modify a variables value then we have to make a new
object inside java pool so that it can be used by the reference variable.
e.g. [ String name = "ankur";
name = "rahul"; ]
in this example the value of (name) variable is changed from "ankur" to "rahul" but actually the value "ankur" does not
modified from "ankur" to "rahul", the (name) variable actually points towards different value in memory named "rahul".

e.g. [ String name = "ankur"; name = "rahul"; ] here as the (name) variable now point towards "rahul" and no other
variable is pointing towards the "ankur" value hence this value get destroyed by the garbage collector and free the
memory space for further uses.

Comparison operator (==) can be used to check whether two different objects having same value are pointing towards the
same value or not. e.g [  String a = "ankur";
                                 String b = "ankur";

                         //        comparison of both the strings
                                 System.out.println( a == b);   ]
here the output is came out as "true", hence it's proved that both the variable are pointing towards the same value in
the java pool.

How to create different object of same value?
[ String a = new String("ankur");
String b = new String("ankur");
//comparison of both the strings
System.out.println( a == b);  ] here the output is came out as "false", hence it shows that both variable (a) and (b)
are not pointing towards same value.
The (new) keyword is used to create a separate object of same value to store in the memory. String Objects declared with
(new) keyword are stored in the heap memory in place of java pool.

ArrayList is a class which is used to make specific objects that shows array properties. We use Arraylist cause it
provide wide range of functions that can be used for specific purposes. We can access these functions with help of (.)
keyword. e.g. [
public class Main{
public static void main(String [] args){
ArrayList number = new ArrayList(;
number.add(36);
System.out.println(number);
}}
] here the object (number) using add function of ArrayList by accessing it using ( . ) keyword.
Similarly the [ System.out.println();] is also does print operation with the help of different methods combined
them with (.) keyword.

There are many format specifier we can use. Here are some common ones:
%c - Character
%d - Decimal number (base 10)
%e - Exponential floating-point number
%f - Integer (base 10)
%o - Octal number (base 8)
%s - String
%u - Unsigned decimal (integer) number
%x - Hexadecimal number (base 16)
%t - Date/time

[ 'a' + 'b' ] when addition operator is used between two characters, addition operation takes place, here the characters
are firstly converted into their respective ASCII numbers and addition happened.

[ "a" + "b" ] when addition operator is used between two strings, concatenation operation takes place, here the output
of the line is ( ab ).

When a integer is concatenated with a String using (+) operator, then that part completely work as a String.
[System.out.println("a" + 1)//this is same as after a few steps: "a"+"1" ] here the output of this line is (a1) but
basically here for concatenation the integer 1 is first converted into a string then concatenation happens.

In java, the (+) operator can only be use for expression where one of the operands should be a String type.
[System.out.println(new Integer{value: 84} + "  " + new ArrayList<>(); ] the (" ") works as a String.

Operator (+) is the only operator in java that has been used for String operations.

[
 public class performance {
      public static void main(String[] args) {
          String series = " ";
          for (int i = 0; i < 26; i++) {
              char ch = (char)('a'+ i);
              series = series + ch;
              /* during this loop execution by every iteration the value gets changed and we know that Strings are immutable
                hence the previous value doesn't change actually a new every has been created every time and the rest of
                the previous value get destroyed by garbage collector since they aren't pointing towards any, thing.
               */
          }
          System.out.println(series);
      }
  }
]

StringBuilder is a data type that can be used to overcome limitations of String data type.
Since Strings are immutable so every time we have to change the value of object then we have to create a separate new
value for the object but in case of StringBuilder it provide wide range of functionality for specific purposes.
[
public class SB {
    public static void main(String[] args) {
        StringBuilder string = new StringBuilder();
        for (int i = 0; i < 26; i++) {
            char ch = (char)('a'+ i);
            string.append(ch);
            /* during this loop execution by every iteration the value gets changed, and we know that StringBuilder
            overcome the immutable limitation of Strings hence there is no new object has been created for the object
            value after every iteration.
             */
        }
        System.out.println(string.toString());
    }
}
]

In Java, Regular Expressions or Regex (in short) in Java is an API for defining String patterns that can be used for
searching, manipulating, and editing a string in Java. Email validation and passwords are a few areas of strings where
Regex is widely used to define the constraints. Regular Expressions in Java are provided under java.util.regex package.
Matching Symbols
Regular expression    Description
   .                  Any character
   [abc]              Exactly given letters
   [abc][yz]          Either first or second set
   [^abc]             Except abc
   [a-z1-7]           a-z or 1-7
   A|B                A or B
   XY                 Exactly XZ

Meta Characters
Regular expression    Description
/d                    Digits
/D                    Not digits
/s                    Space
/S                    Not space
/w                    Alphabets or digit
/W                    Neither alphabet or digit

Quantifiers
Regular expression    Description
  *                    0 or more time
  +                    One or more
  ?                    0 or 1 time
  {X}                  X times
  {X,Y}                Between x and Y time
